// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Gift renders properly 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <div>
    <Form
        bsClass="form"
        componentClass="form"
        horizontal={false}
        inline={false}
    >
        <FormGroup
            bsClass="form-group"
        >
            <ControlLabel
                bsClass="control-label"
                srOnly={false}
            >
                Person
            </ControlLabel>
            <FormControl
                bsClass="form-control"
                className="input-person"
                componentClass="input"
                onChange={[Function]}
            />
        </FormGroup>
        <FormGroup
            bsClass="form-group"
        >
            <ControlLabel
                bsClass="control-label"
                srOnly={false}
            >
                Present
            </ControlLabel>
            <FormControl
                bsClass="form-control"
                className="input-present"
                componentClass="input"
                onChange={[Function]}
            />
        </FormGroup>
    </Form>
    <Button
        active={false}
        block={false}
        bsClass="btn"
        bsStyle="default"
        className="btn-remove"
        disabled={false}
        onClick={[Function]}
    >
        Remove Gift
    </Button>
</div>,
  "nodes": Array [
    <div>
      <Form
            bsClass="form"
            componentClass="form"
            horizontal={false}
            inline={false}
      >
            <FormGroup
                  bsClass="form-group"
            >
                  <ControlLabel
                        bsClass="control-label"
                        srOnly={false}
                  >
                        Person
                  </ControlLabel>
                  <FormControl
                        bsClass="form-control"
                        className="input-person"
                        componentClass="input"
                        onChange={[Function]}
                  />
            </FormGroup>
            <FormGroup
                  bsClass="form-group"
            >
                  <ControlLabel
                        bsClass="control-label"
                        srOnly={false}
                  >
                        Present
                  </ControlLabel>
                  <FormControl
                        bsClass="form-control"
                        className="input-present"
                        componentClass="input"
                        onChange={[Function]}
                  />
            </FormGroup>
      </Form>
      <Button
            active={false}
            block={false}
            bsClass="btn"
            bsStyle="default"
            className="btn-remove"
            disabled={false}
            onClick={[Function]}
      >
            Remove Gift
      </Button>
</div>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 0,
      "_context": Object {},
      "_currentElement": <Gift
        gift={
                Object {
                        "id": 1,
                      }
        }
        removeGift={[Function]}
/>,
      "_debugID": 1,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": Gift {
        "_reactInternalInstance": [Circular],
        "context": Object {},
        "props": Object {
          "gift": Object {
            "id": 1,
          },
          "removeGift": [Function],
        },
        "refs": Object {},
        "state": Object {
          "person": "",
          "present": "",
        },
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountOrder": 1,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": NoopInternalComponent {
        "_currentElement": <div>
          <Form
                    bsClass="form"
                    componentClass="form"
                    horizontal={false}
                    inline={false}
          >
                    <FormGroup
                              bsClass="form-group"
                    >
                              <ControlLabel
                                        bsClass="control-label"
                                        srOnly={false}
                              >
                                        Person
                              </ControlLabel>
                              <FormControl
                                        bsClass="form-control"
                                        className="input-person"
                                        componentClass="input"
                                        onChange={[Function]}
                              />
                    </FormGroup>
                    <FormGroup
                              bsClass="form-group"
                    >
                              <ControlLabel
                                        bsClass="control-label"
                                        srOnly={false}
                              >
                                        Present
                              </ControlLabel>
                              <FormControl
                                        bsClass="form-control"
                                        className="input-present"
                                        componentClass="input"
                                        onChange={[Function]}
                              />
                    </FormGroup>
          </Form>
          <Button
                    active={false}
                    block={false}
                    bsClass="btn"
                    bsStyle="default"
                    className="btn-remove"
                    disabled={false}
                    onClick={[Function]}
          >
                    Remove Gift
          </Button>
</div>,
        "_debugID": 2,
        "_renderedOutput": <div>
          <Form
                    bsClass="form"
                    componentClass="form"
                    horizontal={false}
                    inline={false}
          >
                    <FormGroup
                              bsClass="form-group"
                    >
                              <ControlLabel
                                        bsClass="control-label"
                                        srOnly={false}
                              >
                                        Person
                              </ControlLabel>
                              <FormControl
                                        bsClass="form-control"
                                        className="input-person"
                                        componentClass="input"
                                        onChange={[Function]}
                              />
                    </FormGroup>
                    <FormGroup
                              bsClass="form-group"
                    >
                              <ControlLabel
                                        bsClass="control-label"
                                        srOnly={false}
                              >
                                        Present
                              </ControlLabel>
                              <FormControl
                                        bsClass="form-control"
                                        className="input-present"
                                        componentClass="input"
                                        onChange={[Function]}
                              />
                    </FormGroup>
          </Form>
          <Button
                    active={false}
                    block={false}
                    bsClass="btn"
                    bsStyle="default"
                    className="btn-remove"
                    disabled={false}
                    onClick={[Function]}
          >
                    Remove Gift
          </Button>
</div>,
      },
      "_renderedNodeType": 0,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <Gift
    gift={
        Object {
            "id": 1,
          }
    }
    removeGift={[Function]}
/>,
}
`;
